#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 1

&mkp_input_listener { input-processors = <&zip_temp_layer MOUSE 10000>; };

/ {
    /omit-if-no-ref/

    zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        require-prior-idle-ms = <200>;
        excluded-positions = <
        33 // J
        34 // K
        35 // L
        36 // ;
        >;
    };

    trackball_listener: trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>;
        input-processors =
            <&zip_temp_layer MOUSE 10000>,
            <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>;

        scroller {
            layers = <3>;
            input-processors =
                <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT)>,
                <&zip_xy_scaler 1 16>,
                <&zip_x_scaler 0 16>,
                <&zip_xy_to_scroll_mapper>;

            process-next;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC    &kp N1     &kp N2        &kp N3    &kp N4              &kp N5                                       &kp N6                 &kp N7    &kp N8     &kp N9            &kp N0               &kp BSPC
&kp TAB    &kp Q      &kp W         &kp E     &kp R               &kp T                                        &kp Y                  &kp U     &kp I      &kp O             &kp P                &kp BSPC
&kp CAPS   &kp A      &kp S         &kp D     &kp F               &kp G        &mkp LCLK       &mkp RCLK       &kp H                  &kp J     &kp K      &kp L             &kp SEMI             &kp SQT
&kp LSHFT  &kp Z      &kp X         &kp C     &kp V               &kp B        &kp TAB         &mo 4           &kp N                  &kp M     &kp COMMA  &kp DOT           &kp SLASH            &kp RSHFT
&kp LCTRL  &kp LCTRL  &kp LEFT_GUI  &kp LALT  &lt 2 INT_MUHENKAN  &lt 2 SPACE  &kp LEFT_SHIFT  &kp INT_HENKAN  &lt 3 INTERNATIONAL_4  &kp BSPC  &kp RALT   &lt 4 INT_HENKAN  &mt RIGHT_SHIFT ESC  &kp RCTRL
            >;
        };

        layer_1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mo 3   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans                      &trans           &trans           &trans           &trans                           &trans               &trans     &trans             &trans         &trans            &trans
&trans  &kp NUMBER_1                &kp NUMBER_2     &kp N3           &kp N4           &kp N5                           &kp N6               &kp N7     &kp N8             &kp N9         &kp N0            &trans
&trans  &kp KP_NUMBER_1             &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_N4        &kp KP_N5        &trans  &trans  &kp INTERNATIONAL_3  &kp MINUS  &kp RIGHT_BRACKET  &kp BACKSLASH  &kp SINGLE_QUOTE  &trans
&trans  &mt LEFT_SHIFT KP_NUMBER_6  &kp KP_N7        &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0  &trans  &trans  &kp LEFT_BRACKET     &kp EQUAL  &trans             &trans         &kp INT1          &trans
&trans  &trans                      &trans           &trans           &trans           &trans           &trans  &trans  &trans               &trans     &trans             &trans         &trans            &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans          &trans  &trans  &trans  &trans                  &trans      &trans       &trans         &trans      &trans         &trans
&trans  &kp ESCAPE      &trans  &trans  &trans  &trans                  &kp ESCAPE  &kp TAB      &kp PAGE_DOWN  &kp DELETE  &kp BACKSPACE  &trans
&trans  &kp TAB         &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT    &kp DOWN     &kp UP_ARROW   &kp RIGHT   &kp ENTER      &trans
&trans  &kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans  &trans  &kp HOME    &kp PAGE_UP  &kp PAGE_DOWN  &kp END     &kp DELETE     &trans
&trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans         &trans      &trans         &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans     &trans          &trans          &trans  &trans                        &trans        &trans        &trans        &trans        &trans        &trans
&trans  &kp F1     &kp F2          &kp F3          &kp F4  &kp F5                        &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &trans
&trans  &kp GRAVE  &kp SCROLLLOCK  &kp KP_NUMLOCK  &trans  &trans  &trans  &trans        &kp F11       &kp F12       &trans        &trans        &trans        &trans
&trans  &kp INS    &kp KP_NUMLOCK  &kp CAPSLOCK    &trans  &trans  &trans  &trans        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &trans     &trans          &trans          &trans  &trans  &trans  &out OUT_BLE  &out OUT_USB  &trans        &trans        &trans        &bt BT_CLR    &trans
            >;
        };
    };
};
