#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 1

&mkp_input_listener { input-processors = <&zip_temp_layer MOUSE 200>; };

&mt { hold-while-undecided; };

/ {
    /omit-if-no-ref/

    zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        require-prior-idle-ms = <200>;
        excluded-positions = <
        33 // J
        34 // K
        35 // L
        36 // ;
        >;
    };

    trackball_listener: trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>;
        input-processors =
            <&zip_temp_layer MOUSE 100000>,
            <&zip_xy_scaler 8 16>,
            <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>;

        scroller {
            layers = <3>;
            input-processors =
                <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT)>,
                <&zip_xy_scaler 1 24>,
                <&zip_x_scaler 0 16>,
                <&zip_xy_to_scroll_mapper>;

            process-next;
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        ime_off: ime_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp INT_MUHENKAN &kp LANG2>;
            label = "IME_OFF";
            wait-ms = <0>;
        };

        gui_gui: gui_gui {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2 &kp LEFT_GUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2 &kp LEFT_GUI>;

            label = "GUI_GUI";
        };
    };

    behaviors {
        q_esc: q_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "Q_ESC";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp ESCAPE>;

            tapping-term-ms = <180>;
        };

        macro_layer: macro_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "MACRO_LAYER";
            bindings = <&mo>, <&ime_off>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        z_shift: z_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "Z_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            hold-while-undecided;
        };

        hold_yuusen: hold_yuusen {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_YUUSEN";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        alt_q: alt_q {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_Q";
            bindings = <&ctrl_q>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        ctrl_q: ctrl_q {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_Q";
            bindings = <&q_esc>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };

        gui: gui {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&gui_gui>;
        };

        minus_underscore: minus_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_UNDERSCORE";
            bindings = <&kp MINUS>, <&kp INT_RO>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC    &kp N1          &kp N2  &kp N3    &kp N4            &kp N5                            &kp N6                   &kp N7    &kp N8     &kp N9      &kp N0     &kp BSPC
&kp TAB    &alt_q          &kp W   &kp E     &kp R             &kp T                             &kp Y                    &kp U     &kp I      &kp O       &kp P      &kp BSPC
&kp LCTRL  &kp A           &kp S   &kp D     &kp F             &kp G      &mkp LCLK  &mkp RCLK   &kp H                    &kp J     &kp K      &kp L       &kp SEMI   &kp ENTER
&kp LSHFT  &kp Z           &kp X   &kp C     &kp V             &kp B      &kp TAB    &mo 4       &kp N                    &kp M     &kp COMMA  &kp DOT     &kp SLASH  &kp RIGHT_SHIFT
&kp LCTRL  &kp LEFT_SHIFT  &gui    &kp LALT  &macro_layer 2 0  &kp SPACE  &kp LCTRL  &kp RSHIFT  &hold_yuusen 3 INT_KANA  &kp BSPC  &kp RALT   &kp ESCAPE  &mo 1      &kp RCTRL
            >;
        };

        mouse {
            bindings = <
&trans  &trans           &trans           &trans           &trans           &trans                             &trans  &trans     &trans     &trans     &trans  &trans
&trans  &kp KP_NUMLOCK   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_EQUAL                       &trans  &trans     &trans     &trans     &trans  &trans
&trans  &kp KP_ASTERISK  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &trans       &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mo 3   &trans
&trans  &kp KP_SLASH     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_MINUS  &kp PERCENT  &trans  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &kp KP_ENTER     &kp KP_N0        &kp KP_DOT       &trans           &trans        &trans       &trans  &trans  &trans     &trans     &trans     &trans  &trans
            >;
        };

        symbol {
            bindings = <
&trans  &trans            &trans                &trans           &trans           &trans                           &trans                   &trans                &trans                 &trans             &trans            &trans
&trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)      &kp LS(N3)       &kp LS(N4)       &kp LS(N5)                       &kp LS(N6)               &kp LS(SINGLE_QUOTE)  &kp LS(N8)             &kp LS(N9)         &kp LS(MINUS)     &trans
&trans  &kp LEFT_BRACKET  &kp LS(N7)            &kp INT_RO       &kp KP_N4        &kp KP_N5        &trans  &trans  &kp LS(INTERNATIONAL_3)  &kp MINUS             &kp RIGHT_BRACKET      &kp BACKSLASH      &kp SINGLE_QUOTE  &trans
&trans  &kp LS(SLASH)     &kp LS(LEFT_BRACKET)  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0  &trans  &trans  &kp LS(GRAVE)            &kp LS(SEMICOLON)     &kp LS(RIGHT_BRACKET)  &kp LS(BACKSLASH)  &kp LS(INT1)      &trans
&trans  &trans            &trans                &trans           &trans           &trans           &trans  &trans  &trans                   &trans                &trans                 &trans             &trans            &trans
            >;
        };

        cursor {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans       &trans         &trans      &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &kp ESCAPE  &kp TAB      &kp DEL        &kp DELETE  &kp BACKSPACE  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT    &kp DOWN     &kp UP_ARROW   &kp RIGHT   &kp ENTER      &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp HOME    &kp PAGE_UP  &kp PAGE_DOWN  &kp END     &kp BACKSPACE  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans         &trans      &trans         &trans
            >;
        };

        setting {
            bindings = <
&trans  &trans     &trans          &trans          &trans  &trans                        &trans        &trans        &trans        &trans        &trans        &trans
&trans  &kp F1     &kp F2          &kp F3          &kp F4  &kp F5                        &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &trans
&trans  &kp GRAVE  &kp SCROLLLOCK  &kp KP_NUMLOCK  &trans  &trans  &trans  &trans        &kp F11       &kp F12       &trans        &trans        &trans        &trans
&trans  &kp INS    &kp KP_NUMLOCK  &kp CAPSLOCK    &trans  &trans  &trans  &trans        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &trans     &trans          &trans          &trans  &trans  &trans  &out OUT_USB  &out OUT_BLE  &trans        &trans        &trans        &bt BT_CLR    &trans
            >;
        };
    };
};
